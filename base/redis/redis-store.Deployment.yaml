apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: Redis for storing semi-persistent data like user sessions.
  labels:
    deploy: sourcegraph
    sourcegraph-resource-requires: no-cluster-admin
    app.kubernetes.io/component: redis
  name: redis-store
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis-store
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        deploy: sourcegraph
        app: redis-store
    spec:
      containers:
        - name: redis-store
          image: us.gcr.io/sourcegraph-dev/redis-store:a11f952dcb87100b34fa3b4fcb39dc7d45163a0d@sha256:56a17d742c2a717df787bc07bcff8012bb6629c99b53d986c86c46375c04fef1
          terminationMessagePolicy: FallbackToLogsOnError
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: redis
          ports:
            - containerPort: 6379
              name: redis
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: redis
          resources:
            limits:
              cpu: "1"
              memory: 7Gi
            requests:
              cpu: "1"
              memory: 7Gi
          volumeMounts:
            - mountPath: /redis-data
              name: redis-data
        - name: redis-exporter
          image: us.gcr.io/sourcegraph-dev/redis_exporter:a11f952dcb87100b34fa3b4fcb39dc7d45163a0d@sha256:f3f51453e4261734f08579fe9c812c66ee443626690091401674be4fb724da70
          terminationMessagePolicy: FallbackToLogsOnError
          ports:
            - containerPort: 9121
              name: redisexp
          resources:
            limits:
              cpu: 10m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 100Mi
      securityContext:
        runAsUser: 0
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-store
